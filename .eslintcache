[{"/Users/mickey/my-app/src/index.js":"1","/Users/mickey/my-app/src/ClassComp.js":"2","/Users/mickey/my-app/src/App/App.js":"3","/Users/mickey/my-app/src/App/Home.js":"4","/Users/mickey/my-app/src/App/Styling.js":"5","/Users/mickey/my-app/src/App/Boxes.js":"6","/Users/mickey/my-app/src/App/NotePad.js":"7","/Users/mickey/my-app/src/App/Conditional.js":"8"},{"size":234,"mtime":1612933668425,"results":"9","hashOfConfig":"10"},{"size":1710,"mtime":1612778916034,"results":"11","hashOfConfig":"10"},{"size":561,"mtime":1615250115329,"results":"12","hashOfConfig":"10"},{"size":349,"mtime":1615250115331,"results":"13","hashOfConfig":"10"},{"size":183,"mtime":1615250115333,"results":"14","hashOfConfig":"10"},{"size":1774,"mtime":1615250185374,"results":"15","hashOfConfig":"10"},{"size":4789,"mtime":1615250115332,"results":"16","hashOfConfig":"10"},{"size":1035,"mtime":1615250115330,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1b7hy7k",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"/Users/mickey/my-app/src/index.js",[],["39","40"],"/Users/mickey/my-app/src/ClassComp.js",["41"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport ls from 'local-storage'\nclass ClassComp extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            newText: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleLoad = this.handleLoad.bind(this)\n    }\n\n    handleChange(event) {\n       this.setState({\n            newText: event.target.value\n        })\n    }\n    handleSubmit(event){\n        const name = \"name\"\n        const savedText = this.state.newText;\n        const data = [name, savedText]\n        localStorage.setItem('Page', JSON.stringify(data));\n\n    }\n    handleLoad(event) {\n        const Loaded =(localStorage.getItem(JSON.parse('Page')))\n         this.setState(\n            {newText: Loaded[1]}\n         )\n    }\n    render(){\n        return(\n            <div>\n                <form>\n                    <textarea\n                        value={this.state.newText}\n                        onChange={this.handleChange}\n                        placeholder=\"Write some text...\"\n                        rows=\"30\"\n                        cols=\"150\"\n                    />\n                </form>\n                <button className=\"click1\">\n                    <Link to=\"/\" className=\"buttonText\">Go Home</Link>\n                </button>\n                <button className=\"click2\" onClick={this.handleSubmit}>\n                    Save Note\n                </button>\n                <button className=\"click1\" onClick={this.handleLoad}>\n                    Load Note\n                </button>\n            </div>\n        )\n    }\n}\nexport default ClassComp","/Users/mickey/my-app/src/App/App.js",["42","43"],"/Users/mickey/my-app/src/App/Home.js",["44","45","46","47","48"],"import {React, useState} from 'react'\nimport {Link} from \"react-router-dom\";\nimport ls from 'local-storage'\nimport ClassComp from '../ClassComp'\nimport Modal from 'react-modal'\nimport Boxes from './Boxes'\nexport default function Home(){\n    return(\n        <div>\n           <h1 id=\"head\">Welcome to NoteHolder</h1>\n            <Boxes />\n        </div>\n    )\n}","/Users/mickey/my-app/src/App/Styling.js",[],"/Users/mickey/my-app/src/App/Boxes.js",["49","50"],"/Users/mickey/my-app/src/App/NotePad.js",["51","52","53","54","55"],"//Something is off about same save/load. Check tomorrow\n//Consider finding a way to delete the original file with a particular name from the list of saved \nimport React, {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom'\nimport Modal from 'react-modal';\nimport Boxes from './Boxes'\nexport function NotePad(){\n    const [text,setText]=useState(\"\")\n    const [fileName, setFileName] = useState(\"\")\n    const [open, setOpen] = useState(false)\n    const [saveArray, setSaveArray] = useState([])\n    \n    useEffect(()=>{\n        const saved = localStorage.getItem(\"Save List\");\n        if (saved){\n            setSaveArray(JSON.parse(saved))\n        }\n    },[])\n    useEffect(()=>{localStorage.setItem(\"Save List\", JSON.stringify(saveArray))});\n\n    useEffect(()=>{\n        const loadedText = localStorage.getItem(\"Text To Load\");\n        if (loadedText){\n            setText(loadedText)\n        }\n    },\"\")\n    // While i still have \"Text to Load\", having a string as a second parameter allows the setText function to still work\n    // if there is loaded text on the notepad. Without the string, I can't change the text.\n    //So fix \"Text To Load\" first\n\n    function handleFileChange(event){\n        setFileName(event.target.value);\n    }\n\n    function handleChange(event){\n        setText(event.target.value);\n    }\n    // Changes value of text in textbox\n\n    function handleModal(event){\n        setOpen(!open);\n    }\n   \n    function handleSubmit(event){\n        if(fileName===\"\"){\n            //Case 1: Empty file name\n            //Works\n            alert(\"Please enter valid file name!\")\n        }\n        else{\n            const array = JSON.parse(localStorage.getItem(\"Save List\"));\n            if(array){\n                let file = array.find(({name})=>name == fileName)\n                if(file){\n                    //Case 2: Found saved file with same name; overwrite file\n                    const name = file.name\n                    saveArray.splice(file)\n                    const id = new Date().valueOf()\n                    const data = {name, text, id}\n                    saveArray.push(data)\n                    setOpen(!open);\n                    }\n                else{\n                       //Case 3: No saved file with entered name; Create file\n                       //Works\n                    const id = new Date().valueOf()\n                    const name = fileName\n                    const data = {name, text, id}\n                    saveArray.push(data)\n                    setOpen(!open);\n                    }\n            }    \n            else{\n                //Case 4: Array does not exist, create first save in array\n                //Works\n                const id = new Date().valueOf()\n                const name = fileName\n                const data = {name, text, id}\n                saveArray.push(data)\n                setOpen(!open);\n        }    \n    }\n    }\n    // Saves objects of name, text, and id to an array in localstorage\n    // Currently also saves File name/text pairs as their own object items in local storage\n    // Creates an alert for empty save names\n\n    function handleLoading(event){\n        ///Load Error if there's no SaveArray\n        const array = JSON.parse(localStorage.getItem(\"Save List\"));\n        if(array===null)\n        {\n            alert(\"File name does not exist!\")\n        }\n        else{\n            let file = array.find(({name})=>name == fileName)\n        if(file){\n            setText(file.text)\n            setOpen(false);\n        }\n        else{\n            alert(\"File name does not exist!\")\n        }\n        }\n    }\n\n\n    function wipeSave(event){\n        setSaveArray([])\n    }\n    return(\n        <div>        \n            <form>\n                    <textarea\n                        value={text}\n                        onChange={handleChange}\n                        placeholder=\"Write some text...\"\n                        rows=\"30\"\n                        cols=\"150\"\n                    />\n                </form>\n                {/* Text Box */}\n                \n                <button\n                    className=\"click1\"\n                    onClick={handleModal}\n                >\n                        Save/Load\n                </button>\n                {/* Opens Modal */}\n\n\n                <Modal\n                isOpen = {open}\n                onRequestClose = {handleModal}\n                className=\"modal\">\n                    <div className=\"modalContent\">\n                        <form>\n                            <input type =\"text\" placeholder=\"File Name\" value={fileName} onChange={handleFileChange}/>\n                        </form>\n                        <button className=\"click2\" onClick={handleSubmit}>Save</button>\n                        <button className=\"click1\" onClick={handleLoading}> Load</button>\n                        <button className=\"click2\" onClick = {handleModal}>Close</button>                        \n                        </div>\n                </Modal>\n\n\n\n                <button className=\"click2\"><Link to=\"/\" className=\"buttonText\">Home</Link></button>\n                <button className=\"click3\" onClick = {wipeSave}>Clear</button>\n        </div>\n    )\n}\nexport default NotePad;\n","/Users/mickey/my-app/src/App/Conditional.js",["56","57","58"],"import { React, useState } from \"react\";\nimport { Route, useParams, Link } from \"react-router-dom\";\n\nfunction Conditional() {\n  const saveData = JSON.parse(localStorage.getItem(\"Save List\"));\n  const { id } = useParams();\n  function Search(a) {\n    let file = saveData.find(({ id }) => id === a);\n    const text = file.text;\n    console.log(text);\n  }\n  if (saveData === null) {\n    return (\n      <div className=\"initialNote\">\n        <h3>Saved notes are displayed here</h3>\n      </div>\n    );\n  } else {\n    return saveData.map((note) => (\n      <Link to={`/notes/${note.id}`} className=\"cardText\">\n        <div className=\"savedNote\">\n          <h3>{note.name}</h3>\n          <p>{note.text}</p>\n          {/*Make onClick a function, use arrow function*/}\n          {/* Issue where arrow function won't respond*/}\n          <button\n            className=\"divButton\"\n            onClick={() => {\n              Search(note.id);\n            }}\n          ></button>\n        </div>\n      </Link>\n    ));\n  }\n}\nexport default Conditional;\n",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":3,"column":8,"nodeType":"65","messageId":"66","endLine":3,"endColumn":10},{"ruleId":"63","severity":1,"message":"67","line":5,"column":17,"nodeType":"65","messageId":"66","endLine":5,"endColumn":26},{"ruleId":"63","severity":1,"message":"68","line":8,"column":9,"nodeType":"65","messageId":"66","endLine":8,"endColumn":13},{"ruleId":"63","severity":1,"message":"69","line":1,"column":17,"nodeType":"65","messageId":"66","endLine":1,"endColumn":25},{"ruleId":"63","severity":1,"message":"70","line":2,"column":10,"nodeType":"65","messageId":"66","endLine":2,"endColumn":14},{"ruleId":"63","severity":1,"message":"64","line":3,"column":8,"nodeType":"65","messageId":"66","endLine":3,"endColumn":10},{"ruleId":"63","severity":1,"message":"71","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":17},{"ruleId":"63","severity":1,"message":"72","line":5,"column":8,"nodeType":"65","messageId":"66","endLine":5,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":19,"column":50,"nodeType":"75","messageId":"76","endLine":19,"endColumn":52},{"ruleId":"63","severity":1,"message":"77","line":28,"column":12,"nodeType":"65","messageId":"66","endLine":28,"endColumn":16},{"ruleId":"63","severity":1,"message":"78","line":6,"column":8,"nodeType":"65","messageId":"66","endLine":6,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":17,"column":44,"nodeType":"75","messageId":"76","endLine":17,"endColumn":46},{"ruleId":"79","severity":1,"message":"80","line":25,"column":6,"nodeType":"81","endLine":25,"endColumn":8,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"74","line":61,"column":50,"nodeType":"75","messageId":"76","endLine":61,"endColumn":52},{"ruleId":"73","severity":1,"message":"74","line":100,"column":48,"nodeType":"75","messageId":"76","endLine":100,"endColumn":50},{"ruleId":"63","severity":1,"message":"69","line":1,"column":17,"nodeType":"65","messageId":"66","endLine":1,"endColumn":25},{"ruleId":"63","severity":1,"message":"83","line":2,"column":10,"nodeType":"65","messageId":"66","endLine":2,"endColumn":15},{"ruleId":"63","severity":1,"message":"84","line":6,"column":11,"nodeType":"65","messageId":"66","endLine":6,"endColumn":13},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'ls' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'Link' is defined but never used.","'ClassComp' is defined but never used.","'Modal' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Test' is defined but never used.","'Boxes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["87"],"'Route' is defined but never used.","'id' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [id]",{"range":"90","text":"91"},[900,902],"[id]"]